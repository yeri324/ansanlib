From dae1a4082549b950dba84ebf5e0dd0746399d6c3 Mon Sep 17 00:00:00 2001
From: chanjong <a361212@gmail.com>
Date: Wed, 19 Jun 2024 16:21:47 +0900
Subject: [PATCH] =?UTF-8?q?=EC=98=A4=EB=A5=98=EC=9D=BC=EB=8B=A8=EC=88=98?=
 =?UTF-8?q?=EC=A0=95=20(=EC=8B=9C=ED=81=90=EB=A6=AC=ED=8B=B0=20=EC=A3=BC?=
 =?UTF-8?q?=EC=84=9D=20=EB=B0=8F=20=ED=94=84=EB=A1=9C=ED=8D=BC=ED=8B=B0=20?=
 =?UTF-8?q?=EC=88=98=EC=A0=95)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 ansanlib/pom.xml                              |   4 +-
 .../CustomAuthenticationEntryPoint.java       |  36 ++--
 .../com/ansanlib/config/SecurityConfig.java   | 130 +++++++--------
 .../java/com/ansanlib/constant/Gender.java    |   2 +-
 .../src/main/java/com/ansanlib/constant/Role  |   5 -
 .../controller/board/FaqController.java       |   9 +-
 .../controller/user/UserController.java       | 154 +++++++++---------
 .../com/ansanlib/dto/user/UserFormDto.java    | 120 +++++++-------
 .../java/com/ansanlib/entity/LibUser.java     |  27 ++-
 .../java/com/ansanlib/entity/Reservation.java |   2 +-
 .../ansanlib/service/user/UserService.java    |  96 +++++------
 .../src/main/resources/application.properties |   2 +-
 12 files changed, 291 insertions(+), 296 deletions(-)
 delete mode 100644 ansanlib/src/main/java/com/ansanlib/constant/Role

diff --git a/ansanlib/pom.xml b/ansanlib/pom.xml
index 9540bf2..be4c8e8 100644
--- a/ansanlib/pom.xml
+++ b/ansanlib/pom.xml
@@ -94,11 +94,11 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-mail</artifactId>
 		</dependency>
-		<dependency>
+	<!--	<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-security</artifactId>
 			<version>3.3.0</version>
-		</dependency>
+		</dependency>-->
 
 	</dependencies>
 
diff --git a/ansanlib/src/main/java/com/ansanlib/config/CustomAuthenticationEntryPoint.java b/ansanlib/src/main/java/com/ansanlib/config/CustomAuthenticationEntryPoint.java
index 70998ab..a6e05a3 100644
--- a/ansanlib/src/main/java/com/ansanlib/config/CustomAuthenticationEntryPoint.java
+++ b/ansanlib/src/main/java/com/ansanlib/config/CustomAuthenticationEntryPoint.java
@@ -1,18 +1,18 @@
-package com.ansanlib.config;
-
-import java.io.IOException;
-
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.web.AuthenticationEntryPoint;
-
-import jakarta.servlet.ServletException;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-
-public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {
-	@Override
-	public void commence(HttpServletRequest request, HttpServletResponse response,
-			AuthenticationException authException) throws IOException, ServletException {
-		response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
-	}
-}
\ No newline at end of file
+//package com.ansanlib.config;
+//
+//import java.io.IOException;
+//
+//import org.springframework.security.core.AuthenticationException;
+//import org.springframework.security.web.AuthenticationEntryPoint;
+//
+//import jakarta.servlet.ServletException;
+//import jakarta.servlet.http.HttpServletRequest;
+//import jakarta.servlet.http.HttpServletResponse;
+//
+//public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {
+//	@Override
+//	public void commence(HttpServletRequest request, HttpServletResponse response,
+//			AuthenticationException authException) throws IOException, ServletException {
+//		response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
+//	}
+//}
\ No newline at end of file
diff --git a/ansanlib/src/main/java/com/ansanlib/config/SecurityConfig.java b/ansanlib/src/main/java/com/ansanlib/config/SecurityConfig.java
index e96c4fb..d4ab0f0 100644
--- a/ansanlib/src/main/java/com/ansanlib/config/SecurityConfig.java
+++ b/ansanlib/src/main/java/com/ansanlib/config/SecurityConfig.java
@@ -1,65 +1,65 @@
-package com.ansanlib.config;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.security.web.SecurityFilterChain;
-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
-
-import com.ansanlib.service.user.UserService;
-
-@Configuration
-@EnableWebSecurity
-public class SecurityConfig {
-
-	@Autowired
-	UserService userService;
-
-	@Bean
-	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
-		http.formLogin(formLogin -> formLogin.loginPage("/users/login") // 로그인 페이지 url을 설정
-				.defaultSuccessUrl("/") // 로그인 성공 시 이동할 url
-				.usernameParameter("loginid") // 로그인 시 사용할 파라미터 이름으로 login을 지정
-				.failureUrl("/users/login/error")) // 로그인 실패 시 이동할 url을 설정
-				.logout(logout -> logout.logoutRequestMatcher(new AntPathRequestMatcher("/users/logout")) // 로그아웃 url을
-																											// 설정
-						.logoutSuccessUrl("/"))
-
-				.authorizeHttpRequests(
-						request -> request.requestMatchers("/", "/users/**", "/item/**", "/images/**").permitAll() 
-																												
-								.requestMatchers("/admin/**").hasRole("ADMIN") 
-								.anyRequest().authenticated())
-
-				.exceptionHandling(handling -> handling.authenticationEntryPoint(new CustomAuthenticationEntryPoint()));
-
-		return http.build();
-	}
-
-	@Bean
-	public WebSecurityCustomizer webSecurityCustomizer() {
-		return (web) -> web.ignoring().requestMatchers("/css/**", "/js/**", "/img/**");
-	}
-
-	@Bean
-	public PasswordEncoder passwordEncoder() {
-		return new BCryptPasswordEncoder();
-	}
-
-	@Bean
-	public AuthenticationProvider authenticationProvider() {
-		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
-		provider.setUserDetailsService(userService);
-		provider.setPasswordEncoder(passwordEncoder());
-		return provider;
-	}
-
-	
-}
+//package com.ansanlib.config;
+//
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.context.annotation.Bean;
+//import org.springframework.context.annotation.Configuration;
+//import org.springframework.security.authentication.AuthenticationProvider;
+//import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+//import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
+//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+//import org.springframework.security.crypto.password.PasswordEncoder;
+//import org.springframework.security.web.SecurityFilterChain;
+//import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+//
+//import com.ansanlib.service.user.UserService;
+//
+//@Configuration
+//@EnableWebSecurity
+//public class SecurityConfig {
+//
+//	@Autowired
+//	UserService userService;
+//
+//	@Bean
+//	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
+//		http.formLogin(formLogin -> formLogin.loginPage("/users/login") // 로그인 페이지 url을 설정
+//				.defaultSuccessUrl("/") // 로그인 성공 시 이동할 url
+//				.usernameParameter("loginid") // 로그인 시 사용할 파라미터 이름으로 login을 지정
+//				.failureUrl("/users/login/error")) // 로그인 실패 시 이동할 url을 설정
+//				.logout(logout -> logout.logoutRequestMatcher(new AntPathRequestMatcher("/users/logout")) // 로그아웃 url을
+//																											// 설정
+//						.logoutSuccessUrl("/"))
+//
+//				.authorizeHttpRequests(
+//						request -> request.requestMatchers("/", "/users/**", "/item/**", "/images/**").permitAll() 
+//																												
+//								.requestMatchers("/admin/**").hasRole("ADMIN") 
+//								.anyRequest().authenticated())
+//
+//				.exceptionHandling(handling -> handling.authenticationEntryPoint(new CustomAuthenticationEntryPoint()));
+//
+//		return http.build();
+//	}
+//
+//	@Bean
+//	public WebSecurityCustomizer webSecurityCustomizer() {
+//		return (web) -> web.ignoring().requestMatchers("/css/**", "/js/**", "/img/**");
+//	}
+//
+//	@Bean
+//	public PasswordEncoder passwordEncoder() {
+//		return new BCryptPasswordEncoder();
+//	}
+//
+//	@Bean
+//	public AuthenticationProvider authenticationProvider() {
+//		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
+//		provider.setUserDetailsService(userService);
+//		provider.setPasswordEncoder(passwordEncoder());
+//		return provider;
+//	}
+//
+//	
+//}
diff --git a/ansanlib/src/main/java/com/ansanlib/constant/Gender.java b/ansanlib/src/main/java/com/ansanlib/constant/Gender.java
index bcc6622..d40f14c 100644
--- a/ansanlib/src/main/java/com/ansanlib/constant/Gender.java
+++ b/ansanlib/src/main/java/com/ansanlib/constant/Gender.java
@@ -1,5 +1,5 @@
 package com.ansanlib.constant;
 
 public enum Gender {
-   남, 여
+   MALE, FEMALE
 }
diff --git a/ansanlib/src/main/java/com/ansanlib/constant/Role b/ansanlib/src/main/java/com/ansanlib/constant/Role
deleted file mode 100644
index 8ad3b7c..0000000
--- a/ansanlib/src/main/java/com/ansanlib/constant/Role
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.ansanlib.constant;
-
-public enum Role {
-	USER, ADMIN
-}
diff --git a/ansanlib/src/main/java/com/ansanlib/controller/board/FaqController.java b/ansanlib/src/main/java/com/ansanlib/controller/board/FaqController.java
index 0fdd5db..f2acb9f 100644
--- a/ansanlib/src/main/java/com/ansanlib/controller/board/FaqController.java
+++ b/ansanlib/src/main/java/com/ansanlib/controller/board/FaqController.java
@@ -6,6 +6,7 @@ import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.ResponseBody;
 
 import com.ansanlib.dto.board.FaqFormDto;
 import com.ansanlib.entity.Faq;
@@ -24,14 +25,14 @@ public class FaqController {
 	public String faqList(Model model) {
 		List<Faq> faqList = faqService.getFaqList();
 		model.addAttribute("faqList", faqList);
-		return "FaqList";
+		return "board/FaqList";
 	}
 	
 	
 	@GetMapping(value="/faq/new")
 	public String faqNew(Model model) throws Exception{
 		model.addAttribute("FaqFormDto", new FaqFormDto());
-		return "FaqForm";
+		return "board/FaqForm";
 	}
 	
 	@PostMapping(value="/faq/new")
@@ -43,9 +44,9 @@ public class FaqController {
 			
 		} catch(Exception e) {
 			model.addAttribute("errorMessage", "글 등록 중 에러가 발생하였습니다.");
-			return "FaqForm";
+			return "board/FaqForm";
 		}
-		return "FaqList";
+		return "board/FaqList";
 	}
 
 }
diff --git a/ansanlib/src/main/java/com/ansanlib/controller/user/UserController.java b/ansanlib/src/main/java/com/ansanlib/controller/user/UserController.java
index 2023577..933b743 100644
--- a/ansanlib/src/main/java/com/ansanlib/controller/user/UserController.java
+++ b/ansanlib/src/main/java/com/ansanlib/controller/user/UserController.java
@@ -1,77 +1,77 @@
-package com.ansanlib.controller.user;
-
-import java.util.List;
-
-import org.springframework.security.core.userdetails.User;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.stereotype.Controller;
-import org.springframework.ui.Model;
-import org.springframework.validation.BindingResult;
-import org.springframework.validation.ObjectError;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.servlet.mvc.support.RedirectAttributes;
-
-import com.ansanlib.dto.user.UserFormDto;
-import com.ansanlib.entity.LibUser;
-import com.ansanlib.service.user.UserService;
-
-import jakarta.validation.Valid;
-import lombok.RequiredArgsConstructor;
-
-@RequestMapping("users")
-@Controller
-@RequiredArgsConstructor
-public class UserController {
-
-	private final UserService userService;
-	private final PasswordEncoder passwordEncoder;
-
-	@GetMapping(value = "/new")
-	public String userForm(Model model) {
-		model.addAttribute("userFormDto", new UserFormDto());
-		return "user/userForm";
-	}
-
-	@PostMapping(value = "/new")
-	public String newUser(@Valid UserFormDto userFormDto, BindingResult bindingResult, Model model) {
-		if (bindingResult.hasErrors()) {
-			return "user/userForm";
-		}
-		try {
-			LibUser user = LibUser.createUser(userFormDto, passwordEncoder);
-			userService.saveUser(user);
-		} catch (IllegalStateException e) {
-			model.addAttribute("errorMessage", e.getMessage());
-			return "user/userForm";
-		}
-		return "redirect:/";
-	}
-
-	@GetMapping(value = "/login")
-	public String loginUser() {
-		return "/user/userLoginForm";
-	}
-
-	@GetMapping(value = "/login/error")
-	public String loginError(Model model) {
-		model.addAttribute("loginErrorMsg", "아이디 또는 비밀번호를 확인해주세요");
-		return "/user/userLoginForm";
-	}
-
-	// 아이디 찾기 뷰
-	@GetMapping(value = "/findid")
-	public String findidForm(Model model) {
-		model.addAttribute("userFormDto", new UserFormDto());
-		return "/user/findidForm";
-	}
-
-	//비밀번호 찾기 뷰
-	@GetMapping(value = "/findpwd")
-	public String findpwdForm(Model model) {
-		model.addAttribute("userFormDto", new UserFormDto());
-		return "/user/findpwdForm";
-	}
-
-}
+//package com.ansanlib.controller.user;
+//
+//import java.util.List;
+//
+//import org.springframework.security.core.userdetails.User;
+//import org.springframework.security.crypto.password.PasswordEncoder;
+//import org.springframework.stereotype.Controller;
+//import org.springframework.ui.Model;
+//import org.springframework.validation.BindingResult;
+//import org.springframework.validation.ObjectError;
+//import org.springframework.web.bind.annotation.GetMapping;
+//import org.springframework.web.bind.annotation.PostMapping;
+//import org.springframework.web.bind.annotation.RequestMapping;
+//import org.springframework.web.servlet.mvc.support.RedirectAttributes;
+//
+//import com.ansanlib.dto.user.UserFormDto;
+//import com.ansanlib.entity.LibUser;
+//import com.ansanlib.service.user.UserService;
+//
+//import jakarta.validation.Valid;
+//import lombok.RequiredArgsConstructor;
+//
+//@RequestMapping("users")
+//@Controller
+//@RequiredArgsConstructor
+//public class UserController {
+//
+//	private final UserService userService;
+//	private final PasswordEncoder passwordEncoder;
+//
+//	@GetMapping(value = "/new")
+//	public String userForm(Model model) {
+//		model.addAttribute("userFormDto", new UserFormDto());
+//		return "user/userForm";
+//	}
+//
+//	@PostMapping(value = "/new")
+//	public String newUser(@Valid UserFormDto userFormDto, BindingResult bindingResult, Model model) {
+//		if (bindingResult.hasErrors()) {
+//			return "user/userForm";
+//		}
+//		try {
+//			LibUser user = LibUser.createUser(userFormDto, passwordEncoder);
+//			userService.saveUser(user);
+//		} catch (IllegalStateException e) {
+//			model.addAttribute("errorMessage", e.getMessage());
+//			return "user/userForm";
+//		}
+//		return "redirect:/";
+//	}
+//
+//	@GetMapping(value = "/login")
+//	public String loginUser() {
+//		return "/user/userLoginForm";
+//	}
+//
+//	@GetMapping(value = "/login/error")
+//	public String loginError(Model model) {
+//		model.addAttribute("loginErrorMsg", "아이디 또는 비밀번호를 확인해주세요");
+//		return "/user/userLoginForm";
+//	}
+//
+//	// 아이디 찾기 뷰
+//	@GetMapping(value = "/findid")
+//	public String findidForm(Model model) {
+//		model.addAttribute("userFormDto", new UserFormDto());
+//		return "/user/findidForm";
+//	}
+//
+//	//비밀번호 찾기 뷰
+//	@GetMapping(value = "/findpwd")
+//	public String findpwdForm(Model model) {
+//		model.addAttribute("userFormDto", new UserFormDto());
+//		return "/user/findpwdForm";
+//	}
+//
+//}
diff --git a/ansanlib/src/main/java/com/ansanlib/dto/user/UserFormDto.java b/ansanlib/src/main/java/com/ansanlib/dto/user/UserFormDto.java
index a41e474..54523f9 100644
--- a/ansanlib/src/main/java/com/ansanlib/dto/user/UserFormDto.java
+++ b/ansanlib/src/main/java/com/ansanlib/dto/user/UserFormDto.java
@@ -1,60 +1,60 @@
-package com.ansanlib.dto.user;
-
-import java.time.LocalDateTime;
-
-import org.hibernate.validator.constraints.Length;
-
-import com.ansanlib.constant.Role;
-
-import jakarta.validation.constraints.Email;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotEmpty;
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class UserFormDto {
-
-	@NotBlank(message = "이름은 필수 입력 값입니다.")
-	private String name;
-	
-	@NotEmpty(message = "이메일은 필수 입력 값입니다.")
-	@Email(message = "이메일 형식으로 입력해주세요.")
-	private String email;
-	
-	@NotEmpty(message = "비밀번호는 필수 입력 값입니다.")
-	@Length(min=8, max=16, message = "비밀번호는 8자 이상, 16자 이하로 입력해주세요")
-	private String password;
-	
-	
-	private String address;
-	
-	
-	@NotEmpty(message = "아이디는 필수 입력 값입니다.")
-	private String loginid;
-	
-	@NotEmpty(message = "전화번호는 필수 입력 값입니다.")
-	private String phone;
-	
-
-	@NotEmpty(message = "생년월일은 필수 입력 값입니다.")
-	private LocalDateTime birth;
-	
-	@NotEmpty(message = "필수사항입니다..")
-	private LocalDateTime gender;
-
-	
-	@NotEmpty(message = "수신정보에 체크하여주세요")
-	private String sms;
-	
-	
-	private LocalDateTime joinDate;
-	
-	private LocalDateTime loginDate;
-	
-	private String penalty;
-	
-	private String status;
-
-}
+//package com.ansanlib.dto.user;
+//
+//import java.time.LocalDateTime;
+//
+//import org.hibernate.validator.constraints.Length;
+//
+//import com.ansanlib.constant.Role;
+//
+//import jakarta.validation.constraints.Email;
+//import jakarta.validation.constraints.NotBlank;
+//import jakarta.validation.constraints.NotEmpty;
+//import lombok.Getter;
+//import lombok.Setter;
+//
+//@Getter
+//@Setter
+//public class UserFormDto {
+//
+//	@NotBlank(message = "이름은 필수 입력 값입니다.")
+//	private String name;
+//	
+//	@NotEmpty(message = "이메일은 필수 입력 값입니다.")
+//	@Email(message = "이메일 형식으로 입력해주세요.")
+//	private String email;
+//	
+//	@NotEmpty(message = "비밀번호는 필수 입력 값입니다.")
+//	@Length(min=8, max=16, message = "비밀번호는 8자 이상, 16자 이하로 입력해주세요")
+//	private String password;
+//	
+//	
+//	private String address;
+//	
+//	
+//	@NotEmpty(message = "아이디는 필수 입력 값입니다.")
+//	private String loginid;
+//	
+//	@NotEmpty(message = "전화번호는 필수 입력 값입니다.")
+//	private String phone;
+//	
+//
+//	@NotEmpty(message = "생년월일은 필수 입력 값입니다.")
+//	private LocalDateTime birth;
+//	
+//	@NotEmpty(message = "필수사항입니다..")
+//	private LocalDateTime gender;
+//
+//	
+//	@NotEmpty(message = "수신정보에 체크하여주세요")
+//	private String sms;
+//	
+//	
+//	private LocalDateTime joinDate;
+//	
+//	private LocalDateTime loginDate;
+//	
+//	private String penalty;
+//	
+//	private String status;
+//
+//}
diff --git a/ansanlib/src/main/java/com/ansanlib/entity/LibUser.java b/ansanlib/src/main/java/com/ansanlib/entity/LibUser.java
index de85069..080bf8e 100644
--- a/ansanlib/src/main/java/com/ansanlib/entity/LibUser.java
+++ b/ansanlib/src/main/java/com/ansanlib/entity/LibUser.java
@@ -1,14 +1,12 @@
 package com.ansanlib.entity;
 
-import java.time.LocalDate;
 import java.time.LocalDateTime;
 
-import org.springframework.security.crypto.password.PasswordEncoder;
+//import org.springframework.security.crypto.password.PasswordEncoder;
 
 import com.ansanlib.constant.Gender;
 import com.ansanlib.constant.Role;
 import com.ansanlib.constant.UserStatus;
-import com.ansanlib.dto.user.UserFormDto;
 
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
@@ -47,7 +45,8 @@ public class LibUser extends BaseEntity {
 	
 	private String address;
 	
-	private LocalDate birth;
+	private LocalDateTime birth;
+	
 	@Enumerated(EnumType.STRING)
 	private Gender gender;
 
@@ -70,14 +69,14 @@ public class LibUser extends BaseEntity {
 
 	
 	
-	public static LibUser createUser(UserFormDto userFormDto, PasswordEncoder passwordEncoder) {
-		LibUser user = new LibUser();
-		user.setName(userFormDto.getName());
-		user.setEmail(userFormDto.getEmail());
-		user.setAddress(userFormDto.getAddress());
-		String password = passwordEncoder.encode(userFormDto.getPassword());
-		user.setPassword(password);
-		user.setRole(Role.USER);
-		return user;
-	}
+//	public static LibUser createUser(UserFormDto userFormDto, PasswordEncoder passwordEncoder) {
+//		LibUser user = new LibUser();
+//		user.setName(userFormDto.getName());
+//		user.setEmail(userFormDto.getEmail());
+//		user.setAddress(userFormDto.getAddress());
+//		String password = passwordEncoder.encode(userFormDto.getPassword());
+//		user.setPassword(password);
+//		user.setRole(Role.USER);
+//		return user;
+//	}
 }
\ No newline at end of file
diff --git a/ansanlib/src/main/java/com/ansanlib/entity/Reservation.java b/ansanlib/src/main/java/com/ansanlib/entity/Reservation.java
index 231f592..9c6af37 100644
--- a/ansanlib/src/main/java/com/ansanlib/entity/Reservation.java
+++ b/ansanlib/src/main/java/com/ansanlib/entity/Reservation.java
@@ -19,7 +19,7 @@ import lombok.Setter;
 public class Reservation {
 	
 	@Id
-	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	@GeneratedValue(strategy = GenerationType.AUTO)
 	private Long id;
 	
 	@Column(nullable = false)
diff --git a/ansanlib/src/main/java/com/ansanlib/service/user/UserService.java b/ansanlib/src/main/java/com/ansanlib/service/user/UserService.java
index db0e3a0..dd48a28 100644
--- a/ansanlib/src/main/java/com/ansanlib/service/user/UserService.java
+++ b/ansanlib/src/main/java/com/ansanlib/service/user/UserService.java
@@ -1,48 +1,48 @@
-package com.ansanlib.service.user;
-
-import org.springframework.security.core.userdetails.User;
-import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.ansanlib.entity.LibUser;
-import com.ansanlib.repository.user.UserRepository;
-
-import lombok.RequiredArgsConstructor;
-
-@Service
-@Transactional
-@RequiredArgsConstructor
-public class UserService implements UserDetailsService {
-
-	private final UserRepository userRepository;
-
-	public LibUser saveUser(LibUser user) {
-		validateDuplicateUser(user);
-		return userRepository.save(user);
-	}
-
-	private void validateDuplicateUser(LibUser user) {
-		LibUser findUser = userRepository.findByEmail(user.getEmail());
-		if (findUser != null) {
-			throw new IllegalStateException("이미 가입된 회원입니다.");
-		}
-	}
-
-	@Override
-	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
-		LibUser user = userRepository.findByEmail(email);
-		if (user == null) {
-			throw new UsernameNotFoundException(email);
-		}
-		return User.builder()
-				.username(user.getEmail())
-				.password(user.getPassword())
-				.roles(user.getRole().toString())
-				.build();
-	
-	}
-
-}
+//package com.ansanlib.service.user;
+//
+//import org.springframework.security.core.userdetails.User;
+//import org.springframework.security.core.userdetails.UserDetails;
+//import org.springframework.security.core.userdetails.UserDetailsService;
+//import org.springframework.security.core.userdetails.UsernameNotFoundException;
+//import org.springframework.stereotype.Service;
+//import org.springframework.transaction.annotation.Transactional;
+//
+//import com.ansanlib.entity.LibUser;
+//import com.ansanlib.repository.user.UserRepository;
+//
+//import lombok.RequiredArgsConstructor;
+//
+//@Service
+//@Transactional
+//@RequiredArgsConstructor
+//public class UserService implements UserDetailsService {
+//
+//	private final UserRepository userRepository;
+//
+//	public LibUser saveUser(LibUser user) {
+//		validateDuplicateUser(user);
+//		return userRepository.save(user);
+//	}
+//
+//	private void validateDuplicateUser(LibUser user) {
+//		LibUser findUser = userRepository.findByEmail(user.getEmail());
+//		if (findUser != null) {
+//			throw new IllegalStateException("이미 가입된 회원입니다.");
+//		}
+//	}
+//
+//	@Override
+//	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
+//		LibUser user = userRepository.findByEmail(email);
+//		if (user == null) {
+//			throw new UsernameNotFoundException(email);
+//		}
+//		return User.builder()
+//				.username(user.getEmail())
+//				.password(user.getPassword())
+//				.roles(user.getRole().toString())
+//				.build();
+//	
+//	}
+//
+//}
diff --git a/ansanlib/src/main/resources/application.properties b/ansanlib/src/main/resources/application.properties
index 544b8b7..a2d38fe 100644
--- a/ansanlib/src/main/resources/application.properties
+++ b/ansanlib/src/main/resources/application.properties
@@ -23,7 +23,7 @@ spring.jpa.database-platform=org.hibernate.dialect.OracleDialect
 spring.mvc.pathmatch.matching-strategy=ant-path-matcher
 
 #Thymeleaf cache
-spring.thymeleaf.prefix=classpath:/templates/fragments/
+spring.thymeleaf.prefix=classpath:/templates/
 spring.thymeleaf.suffix=.html
 spring.thymeleaf.cache=false
 
-- 
2.45.1.windows.1

